//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.42000
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace BookForConsumingWCF.WCFServiceReference {
    using System.Runtime.Serialization;
    using System;
    
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Runtime.Serialization", "4.0.0.0")]
    [System.Runtime.Serialization.DataContractAttribute(Name="Contact", Namespace="http://schemas.datacontract.org/2004/07/BookWcfService")]
    [System.SerializableAttribute()]
    public partial class Contact : object, System.Runtime.Serialization.IExtensibleDataObject, System.ComponentModel.INotifyPropertyChanged {
        
        [System.NonSerializedAttribute()]
        private System.Runtime.Serialization.ExtensionDataObject extensionDataField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string EmailField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private int IdField;
        
        [System.Runtime.Serialization.OptionalFieldAttribute()]
        private string NameField;
        
        [global::System.ComponentModel.BrowsableAttribute(false)]
        public System.Runtime.Serialization.ExtensionDataObject ExtensionData {
            get {
                return this.extensionDataField;
            }
            set {
                this.extensionDataField = value;
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Email {
            get {
                return this.EmailField;
            }
            set {
                if ((object.ReferenceEquals(this.EmailField, value) != true)) {
                    this.EmailField = value;
                    this.RaisePropertyChanged("Email");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public int Id {
            get {
                return this.IdField;
            }
            set {
                if ((this.IdField.Equals(value) != true)) {
                    this.IdField = value;
                    this.RaisePropertyChanged("Id");
                }
            }
        }
        
        [System.Runtime.Serialization.DataMemberAttribute()]
        public string Name {
            get {
                return this.NameField;
            }
            set {
                if ((object.ReferenceEquals(this.NameField, value) != true)) {
                    this.NameField = value;
                    this.RaisePropertyChanged("Name");
                }
            }
        }
        
        public event System.ComponentModel.PropertyChangedEventHandler PropertyChanged;
        
        protected void RaisePropertyChanged(string propertyName) {
            System.ComponentModel.PropertyChangedEventHandler propertyChanged = this.PropertyChanged;
            if ((propertyChanged != null)) {
                propertyChanged(this, new System.ComponentModel.PropertyChangedEventArgs(propertyName));
            }
        }
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    [System.ServiceModel.ServiceContractAttribute(ConfigurationName="WCFServiceReference.IBookService")]
    public interface IBookService {
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/GetContacts", ReplyAction="http://tempuri.org/IBookService/GetContactsResponse")]
        BookForConsumingWCF.WCFServiceReference.Contact[] GetContacts();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/GetContacts", ReplyAction="http://tempuri.org/IBookService/GetContactsResponse")]
        System.Threading.Tasks.Task<BookForConsumingWCF.WCFServiceReference.Contact[]> GetContactsAsync();
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/InsertContact", ReplyAction="http://tempuri.org/IBookService/InsertContactResponse")]
        void InsertContact(BookForConsumingWCF.WCFServiceReference.Contact cobj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/InsertContact", ReplyAction="http://tempuri.org/IBookService/InsertContactResponse")]
        System.Threading.Tasks.Task InsertContactAsync(BookForConsumingWCF.WCFServiceReference.Contact cobj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/UpdateContact", ReplyAction="http://tempuri.org/IBookService/UpdateContactResponse")]
        void UpdateContact(BookForConsumingWCF.WCFServiceReference.Contact cobj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/UpdateContact", ReplyAction="http://tempuri.org/IBookService/UpdateContactResponse")]
        System.Threading.Tasks.Task UpdateContactAsync(BookForConsumingWCF.WCFServiceReference.Contact cobj);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/DeleteContact", ReplyAction="http://tempuri.org/IBookService/DeleteContactResponse")]
        void DeleteContact(int Id);
        
        [System.ServiceModel.OperationContractAttribute(Action="http://tempuri.org/IBookService/DeleteContact", ReplyAction="http://tempuri.org/IBookService/DeleteContactResponse")]
        System.Threading.Tasks.Task DeleteContactAsync(int Id);
    }
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public interface IBookServiceChannel : BookForConsumingWCF.WCFServiceReference.IBookService, System.ServiceModel.IClientChannel {
    }
    
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
    public partial class BookServiceClient : System.ServiceModel.ClientBase<BookForConsumingWCF.WCFServiceReference.IBookService>, BookForConsumingWCF.WCFServiceReference.IBookService {
        
        public BookServiceClient() {
        }
        
        public BookServiceClient(string endpointConfigurationName) : 
                base(endpointConfigurationName) {
        }
        
        public BookServiceClient(string endpointConfigurationName, string remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BookServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(endpointConfigurationName, remoteAddress) {
        }
        
        public BookServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
                base(binding, remoteAddress) {
        }
        
        public BookForConsumingWCF.WCFServiceReference.Contact[] GetContacts() {
            return base.Channel.GetContacts();
        }
        
        public System.Threading.Tasks.Task<BookForConsumingWCF.WCFServiceReference.Contact[]> GetContactsAsync() {
            return base.Channel.GetContactsAsync();
        }
        
        public void InsertContact(BookForConsumingWCF.WCFServiceReference.Contact cobj) {
            base.Channel.InsertContact(cobj);
        }
        
        public System.Threading.Tasks.Task InsertContactAsync(BookForConsumingWCF.WCFServiceReference.Contact cobj) {
            return base.Channel.InsertContactAsync(cobj);
        }
        
        public void UpdateContact(BookForConsumingWCF.WCFServiceReference.Contact cobj) {
            base.Channel.UpdateContact(cobj);
        }
        
        public System.Threading.Tasks.Task UpdateContactAsync(BookForConsumingWCF.WCFServiceReference.Contact cobj) {
            return base.Channel.UpdateContactAsync(cobj);
        }
        
        public void DeleteContact(int Id) {
            base.Channel.DeleteContact(Id);
        }
        
        public System.Threading.Tasks.Task DeleteContactAsync(int Id) {
            return base.Channel.DeleteContactAsync(Id);
        }
    }
}
